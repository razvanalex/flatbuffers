<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class BookReaderT implements IGeneratedObject
{
    /**
     * @var int $books_read
     */
    public $books_read;

    /**
     * @param int $books_read
     */
    public function __construct($books_read = 0)
    {
        $this->books_read = $books_read;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return BookReader::createBookReader($builder, $this->booksRead);
    }
}

class BookReader extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return BookReader
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function GetBooksRead()
    {
        return $this->bb->getInt($this->bb_pos + 0);
    }


    /**
     * @return int offset
     */
    public static function createBookReader(FlatBufferBuilder $builder, $booksRead)
    {
        $builder->prep(4, 4);
        $builder->putInt($booksRead);
        return $builder->offset();
    }

    /**
     * @param BookReaderT $o
     */
    public function unPackTo(&$o)
    {
        $o->books_read = $this->GetBooksRead();
    }

    /**
     * @return BookReaderT
     */
    public function unPack()
    {
        $o = new BookReaderT();
        $this->unPackTo($o);
        return $o;
    }
}
