<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\FlatBufferBuilder;

class GadgetT
{
    /**
     * @var Gadget $type
     */
    public $type;

    /**
     * @var mixed $value
     */
    public $value;

    /**
     * @param Gadget $type
     * @param mixed $value
     */
    public function __construct($type, $value)
    {
        $this->type = $type;
        $this->value = $value;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        switch ($this->type) {
            case Gadget::FallingTub:
                return $this->value->pack($builder);
            case Gadget::HandFan:
                return $this->value->pack($builder);
            default:
                return 0;
        }
    }
}

class Gadget
{
    const NONE = 0;
    const FallingTub = 1;
    const HandFan = 2;

    private static $names = array(
        Gadget::NONE=>"NONE",
        Gadget::FallingTub=>"FallingTub",
        Gadget::HandFan=>"HandFan",
    );

    public static function Name($e)
    {
        if (!isset(self::$names[$e])) {
            throw new \Exception();
        }
        return self::$names[$e];
    }

    /**
     * @return GadgetT
     */
    public static function unPack($union_type, $accessor)
    {
        switch ($union_type) {
            case Gadget::FallingTub:
                $obj = $accessor(new \FallingTub());
                return new GadgetT($union_type, $obj->unPack());
            case Gadget::HandFan:
                $obj = $accessor(new \HandFan());
                return new GadgetT($union_type, $obj->unPack());
            default:
                return null;
        }
    }
}
