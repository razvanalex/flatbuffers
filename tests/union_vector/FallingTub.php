<?php
// automatically generated by the FlatBuffers compiler, do not modify

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class FallingTubT implements IGeneratedObject
{
    /**
     * @var int $weight
     */
    public $weight;

    /**
     * @param int $weight
     */
    public function __construct($weight = 0)
    {
        $this->weight = $weight;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return FallingTub::createFallingTub($builder, $this->weight);
    }
}

class FallingTub extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return FallingTub
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return int
     */
    public function GetWeight()
    {
        return $this->bb->getInt($this->bb_pos + 0);
    }


    /**
     * @return int offset
     */
    public static function createFallingTub(FlatBufferBuilder $builder, $weight)
    {
        $builder->prep(4, 4);
        $builder->putInt($weight);
        return $builder->offset();
    }

    /**
     * @param FallingTubT $o
     */
    public function unPackTo(&$o)
    {
        $o->weight = $this->GetWeight();
    }

    /**
     * @return FallingTubT
     */
    public function unPack()
    {
        $o = new FallingTubT();
        $this->unPackTo($o);
        return $o;
    }
}
