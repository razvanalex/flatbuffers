<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class StructOfStructsT implements IGeneratedObject
{
    /**
     * @var AbilityT $a
     */
    public $a;

    /**
     * @var TestT $b
     */
    public $b;

    /**
     * @var AbilityT $c
     */
    public $c;

    /**
     * @param AbilityT $a
     * @param TestT $b
     * @param AbilityT $c
     */
    public function __construct($a = null, $b = null, $c = null)
    {
        $this->a = $a;
        $this->b = $b;
        $this->c = $c;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return StructOfStructs::createStructOfStructs($builder, $this->a->id, $this->a->distance, $this->b->a, $this->b->b, $this->c->id, $this->c->distance);
    }
}

class StructOfStructs extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StructOfStructs
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return Ability
     */
    public function getA()
    {
        $obj = new Ability();
        $obj->init($this->bb_pos + 0, $this->bb);
        return $obj;
    }

    /**
     * @return Test
     */
    public function getB()
    {
        $obj = new Test();
        $obj->init($this->bb_pos + 8, $this->bb);
        return $obj;
    }

    /**
     * @return Ability
     */
    public function getC()
    {
        $obj = new Ability();
        $obj->init($this->bb_pos + 12, $this->bb);
        return $obj;
    }


    /**
     * @return int offset
     */
    public static function createStructOfStructs(FlatBufferBuilder $builder, $a_id, $a_distance, $b_a, $b_b, $c_id, $c_distance)
    {
        $builder->prep(4, 20);
        $builder->prep(4, 8);
        $builder->putUint($c_distance);
        $builder->putUint($c_id);
        $builder->prep(2, 4);
        $builder->pad(1);
        $builder->putSbyte($b_b);
        $builder->putShort($b_a);
        $builder->prep(4, 8);
        $builder->putUint($a_distance);
        $builder->putUint($a_id);
        return $builder->offset();
    }

    /**
     * @param StructOfStructsT $o
     */
    public function unPackTo(&$o)
    {
        $a = $this->getA();
        if ($a !== null) {
            $o->a = $a->unPack();
        }
        $b = $this->getB();
        if ($b !== null) {
            $o->b = $b->unPack();
        }
        $c = $this->getC();
        if ($c !== null) {
            $o->c = $c->unPack();
        }
    }

    /**
     * @return StructOfStructsT
     */
    public function unPack()
    {
        $o = new StructOfStructsT();
        $this->unPackTo($o);
        return $o;
    }
}
