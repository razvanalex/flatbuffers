<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class Vec3T implements IGeneratedObject
{
    /**
     * @var float $x
     */
    public $x;

    /**
     * @var float $y
     */
    public $y;

    /**
     * @var float $z
     */
    public $z;

    /**
     * @var double $test1
     */
    public $test1;

    /**
     * @var byte $test2
     */
    public $test2;

    /**
     * @var TestT $test3
     */
    public $test3;

    /**
     * @param float $x
     * @param float $y
     * @param float $z
     * @param double $test1
     * @param byte $test2
     * @param TestT $test3
     */
    public function __construct($x = 0.0, $y = 0.0, $z = 0.0, $test1 = 0.0, $test2 = 0, $test3 = null)
    {
        $this->x = $x;
        $this->y = $y;
        $this->z = $z;
        $this->test1 = $test1;
        $this->test2 = $test2;
        $this->test3 = $test3;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return Vec3::createVec3($builder, $this->x, $this->y, $this->z, $this->test1, $this->test2, $this->test3->a, $this->test3->b);
    }
}

class Vec3 extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Vec3
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return float
     */
    public function GetX()
    {
        return $this->bb->getFloat($this->bb_pos + 0);
    }

    /**
     * @return float
     */
    public function GetY()
    {
        return $this->bb->getFloat($this->bb_pos + 4);
    }

    /**
     * @return float
     */
    public function GetZ()
    {
        return $this->bb->getFloat($this->bb_pos + 8);
    }

    /**
     * @return double
     */
    public function GetTest1()
    {
        return $this->bb->getDouble($this->bb_pos + 16);
    }

    /**
     * @return byte
     */
    public function GetTest2()
    {
        return $this->bb->getByte($this->bb_pos + 24);
    }

    /**
     * @return Test
     */
    public function getTest3()
    {
        $obj = new Test();
        $obj->init($this->bb_pos + 26, $this->bb);
        return $obj;
    }


    /**
     * @return int offset
     */
    public static function createVec3(FlatBufferBuilder $builder, $x, $y, $z, $test1, $test2, $test3_a, $test3_b)
    {
        $builder->prep(8, 32);
        $builder->pad(2);
        $builder->prep(2, 4);
        $builder->pad(1);
        $builder->putSbyte($test3_b);
        $builder->putShort($test3_a);
        $builder->pad(1);
        $builder->putByte($test2);
        $builder->putDouble($test1);
        $builder->pad(4);
        $builder->putFloat($z);
        $builder->putFloat($y);
        $builder->putFloat($x);
        return $builder->offset();
    }

    /**
     * @param Vec3T $o
     */
    public function unPackTo(&$o)
    {
        $o->x = $this->GetX();
        $o->y = $this->GetY();
        $o->z = $this->GetZ();
        $o->test1 = $this->GetTest1();
        $o->test2 = $this->GetTest2();
        $test3 = $this->getTest3();
        if ($test3 !== null) {
            $o->test3 = $test3->unPack();
        }
    }

    /**
     * @return Vec3T
     */
    public function unPack()
    {
        $o = new Vec3T();
        $this->unPackTo($o);
        return $o;
    }
}
