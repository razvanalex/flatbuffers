<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class ReferrableT implements IGeneratedObject
{
    /**
     * @var ulong $id
     */
    public $id;

    /**
     * @param ulong $id
     */
    public function __construct($id = 0)
    {
        $this->id = $id;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        Referrable::startReferrable($builder);
        Referrable::addId($builder, $this->id);
        $referrable = Referrable::endReferrable($builder);
        return $referrable;
    }
}

class Referrable extends Table implements IUnpackableObject
{
    /**
     * @param ByteBuffer $bb
     * @return Referrable
     */
    public static function getRootAsReferrable(ByteBuffer $bb)
    {
        $obj = new Referrable();
        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param ByteBuffer $bb
     * @return Referrable
     */
    public static function getSizePrefixedRootAsReferrable(ByteBuffer $bb)
    {
        $obj = new Referrable();
        $bb->setPosition($bb->getPosition() + Constants::SIZEOF_INT);
        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    public static function ReferrableIdentifier()
    {
        return "MONS";
    }

    public static function ReferrableBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ReferrableIdentifier());
    }

    public static function ReferrableExtension()
    {
        return "mon";
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Referrable
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return ulong
     */
    public function getId()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getUlong($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startReferrable(FlatBufferBuilder $builder)
    {
        $builder->startObject(1);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Referrable
     */
    public static function createReferrable(FlatBufferBuilder $builder, $id)
    {
        $builder->startObject(1);
        self::addId($builder, $id);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ulong
     * @return void
     */
    public static function addId(FlatBufferBuilder $builder, $id)
    {
        $builder->addUlongX(0, $id, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endReferrable(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param ReferrableT $o
     */
    public function unPackTo(&$o)
    {
        $o->id = $this->getId();
    }

    /**
     * @return ReferrableT
     */
    public function unPack()
    {
        $o = new ReferrableT();
        $this->unPackTo($o);
        return $o;
    }
}
