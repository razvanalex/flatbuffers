<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class AbilityT implements IGeneratedObject
{
    /**
     * @var uint $id
     */
    public $id;

    /**
     * @var uint $distance
     */
    public $distance;

    /**
     * @param uint $id
     * @param uint $distance
     */
    public function __construct($id = 0, $distance = 0)
    {
        $this->id = $id;
        $this->distance = $distance;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return Ability::createAbility($builder, $this->id, $this->distance);
    }
}

class Ability extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Ability
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return uint
     */
    public function GetId()
    {
        return $this->bb->getUint($this->bb_pos + 0);
    }

    /**
     * @return uint
     */
    public function GetDistance()
    {
        return $this->bb->getUint($this->bb_pos + 4);
    }


    /**
     * @return int offset
     */
    public static function createAbility(FlatBufferBuilder $builder, $id, $distance)
    {
        $builder->prep(4, 8);
        $builder->putUint($distance);
        $builder->putUint($id);
        return $builder->offset();
    }

    /**
     * @param AbilityT $o
     */
    public function unPackTo(&$o)
    {
        $o->id = $this->GetId();
        $o->distance = $this->GetDistance();
    }

    /**
     * @return AbilityT
     */
    public function unPack()
    {
        $o = new AbilityT();
        $this->unPackTo($o);
        return $o;
    }
}
