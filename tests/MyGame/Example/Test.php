<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class TestT implements IGeneratedObject
{
    /**
     * @var short $a
     */
    public $a;

    /**
     * @var sbyte $b
     */
    public $b;

    /**
     * @param short $a
     * @param sbyte $b
     */
    public function __construct($a = 0, $b = 0)
    {
        $this->a = $a;
        $this->b = $b;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return Test::createTest($builder, $this->a, $this->b);
    }
}

class Test extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Test
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return short
     */
    public function GetA()
    {
        return $this->bb->getShort($this->bb_pos + 0);
    }

    /**
     * @return sbyte
     */
    public function GetB()
    {
        return $this->bb->getSbyte($this->bb_pos + 2);
    }


    /**
     * @return int offset
     */
    public static function createTest(FlatBufferBuilder $builder, $a, $b)
    {
        $builder->prep(2, 4);
        $builder->pad(1);
        $builder->putSbyte($b);
        $builder->putShort($a);
        return $builder->offset();
    }

    /**
     * @param TestT $o
     */
    public function unPackTo(&$o)
    {
        $o->a = $this->GetA();
        $o->b = $this->GetB();
    }

    /**
     * @return TestT
     */
    public function unPack()
    {
        $o = new TestT();
        $this->unPackTo($o);
        return $o;
    }
}
