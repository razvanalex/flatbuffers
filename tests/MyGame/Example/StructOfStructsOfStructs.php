<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace MyGame\Example;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class StructOfStructsOfStructsT implements IGeneratedObject
{
    /**
     * @var StructOfStructsT $a
     */
    public $a;

    /**
     * @param StructOfStructsT $a
     */
    public function __construct($a = null)
    {
        $this->a = $a;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        return StructOfStructsOfStructs::createStructOfStructsOfStructs($builder, $this->a->a->id, $this->a->a->distance, $this->a->b->a, $this->a->b->b, $this->a->c->id, $this->a->c->distance);
    }
}

class StructOfStructsOfStructs extends Struct implements IUnpackableObject
{
    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return StructOfStructsOfStructs
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return StructOfStructs
     */
    public function getA()
    {
        $obj = new StructOfStructs();
        $obj->init($this->bb_pos + 0, $this->bb);
        return $obj;
    }


    /**
     * @return int offset
     */
    public static function createStructOfStructsOfStructs(FlatBufferBuilder $builder, $a_a_id, $a_a_distance, $a_b_a, $a_b_b, $a_c_id, $a_c_distance)
    {
        $builder->prep(4, 20);
        $builder->prep(4, 20);
        $builder->prep(4, 8);
        $builder->putUint($a_c_distance);
        $builder->putUint($a_c_id);
        $builder->prep(2, 4);
        $builder->pad(1);
        $builder->putSbyte($a_b_b);
        $builder->putShort($a_b_a);
        $builder->prep(4, 8);
        $builder->putUint($a_a_distance);
        $builder->putUint($a_a_id);
        return $builder->offset();
    }

    /**
     * @param StructOfStructsOfStructsT $o
     */
    public function unPackTo(&$o)
    {
        $a = $this->getA();
        if ($a !== null) {
            $o->a = $a->unPack();
        }
    }

    /**
     * @return StructOfStructsOfStructsT
     */
    public function unPack()
    {
        $o = new StructOfStructsOfStructsT();
        $this->unPackTo($o);
        return $o;
    }
}
