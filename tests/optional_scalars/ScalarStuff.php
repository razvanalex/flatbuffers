<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace optional_scalars;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;
use \Google\FlatBuffers\Constants;
use \Google\FlatBuffers\IUnpackableObject;
use \Google\FlatBuffers\IGeneratedObject;

class ScalarStuffT implements IGeneratedObject
{
    /**
     * @var sbyte $just_i8
     */
    public $just_i8;

    /**
     * @var sbyte $maybe_i8
     */
    public $maybe_i8;

    /**
     * @var sbyte $default_i8
     */
    public $default_i8;

    /**
     * @var byte $just_u8
     */
    public $just_u8;

    /**
     * @var byte $maybe_u8
     */
    public $maybe_u8;

    /**
     * @var byte $default_u8
     */
    public $default_u8;

    /**
     * @var short $just_i16
     */
    public $just_i16;

    /**
     * @var short $maybe_i16
     */
    public $maybe_i16;

    /**
     * @var short $default_i16
     */
    public $default_i16;

    /**
     * @var ushort $just_u16
     */
    public $just_u16;

    /**
     * @var ushort $maybe_u16
     */
    public $maybe_u16;

    /**
     * @var ushort $default_u16
     */
    public $default_u16;

    /**
     * @var int $just_i32
     */
    public $just_i32;

    /**
     * @var int $maybe_i32
     */
    public $maybe_i32;

    /**
     * @var int $default_i32
     */
    public $default_i32;

    /**
     * @var uint $just_u32
     */
    public $just_u32;

    /**
     * @var uint $maybe_u32
     */
    public $maybe_u32;

    /**
     * @var uint $default_u32
     */
    public $default_u32;

    /**
     * @var long $just_i64
     */
    public $just_i64;

    /**
     * @var long $maybe_i64
     */
    public $maybe_i64;

    /**
     * @var long $default_i64
     */
    public $default_i64;

    /**
     * @var ulong $just_u64
     */
    public $just_u64;

    /**
     * @var ulong $maybe_u64
     */
    public $maybe_u64;

    /**
     * @var ulong $default_u64
     */
    public $default_u64;

    /**
     * @var float $just_f32
     */
    public $just_f32;

    /**
     * @var float $maybe_f32
     */
    public $maybe_f32;

    /**
     * @var float $default_f32
     */
    public $default_f32;

    /**
     * @var double $just_f64
     */
    public $just_f64;

    /**
     * @var double $maybe_f64
     */
    public $maybe_f64;

    /**
     * @var double $default_f64
     */
    public $default_f64;

    /**
     * @var bool $just_bool
     */
    public $just_bool;

    /**
     * @var bool $maybe_bool
     */
    public $maybe_bool;

    /**
     * @var bool $default_bool
     */
    public $default_bool;

    /**
     * @var sbyte $just_enum
     */
    public $just_enum;

    /**
     * @var sbyte $maybe_enum
     */
    public $maybe_enum;

    /**
     * @var sbyte $default_enum
     */
    public $default_enum;

    /**
     * @param sbyte $just_i8
     * @param sbyte $maybe_i8
     * @param sbyte $default_i8
     * @param byte $just_u8
     * @param byte $maybe_u8
     * @param byte $default_u8
     * @param short $just_i16
     * @param short $maybe_i16
     * @param short $default_i16
     * @param ushort $just_u16
     * @param ushort $maybe_u16
     * @param ushort $default_u16
     * @param int $just_i32
     * @param int $maybe_i32
     * @param int $default_i32
     * @param uint $just_u32
     * @param uint $maybe_u32
     * @param uint $default_u32
     * @param long $just_i64
     * @param long $maybe_i64
     * @param long $default_i64
     * @param ulong $just_u64
     * @param ulong $maybe_u64
     * @param ulong $default_u64
     * @param float $just_f32
     * @param float $maybe_f32
     * @param float $default_f32
     * @param double $just_f64
     * @param double $maybe_f64
     * @param double $default_f64
     * @param bool $just_bool
     * @param bool $maybe_bool
     * @param bool $default_bool
     * @param sbyte $just_enum
     * @param sbyte $maybe_enum
     * @param sbyte $default_enum
     */
    public function __construct($just_i8 = 0, $maybe_i8 = null, $default_i8 = 42, $just_u8 = 0, $maybe_u8 = null, $default_u8 = 42, $just_i16 = 0, $maybe_i16 = null, $default_i16 = 42, $just_u16 = 0, $maybe_u16 = null, $default_u16 = 42, $just_i32 = 0, $maybe_i32 = null, $default_i32 = 42, $just_u32 = 0, $maybe_u32 = null, $default_u32 = 42, $just_i64 = 0, $maybe_i64 = null, $default_i64 = 42, $just_u64 = 0, $maybe_u64 = null, $default_u64 = 42, $just_f32 = 0.0, $maybe_f32 = null, $default_f32 = 42.0, $just_f64 = 0.0, $maybe_f64 = null, $default_f64 = 42.0, $just_bool = false, $maybe_bool = null, $default_bool = true, $just_enum = \optional_scalars\OptionalByte::None, $maybe_enum = null, $default_enum = \optional_scalars\OptionalByte::One)
    {
        $this->just_i8 = $just_i8;
        $this->maybe_i8 = $maybe_i8;
        $this->default_i8 = $default_i8;
        $this->just_u8 = $just_u8;
        $this->maybe_u8 = $maybe_u8;
        $this->default_u8 = $default_u8;
        $this->just_i16 = $just_i16;
        $this->maybe_i16 = $maybe_i16;
        $this->default_i16 = $default_i16;
        $this->just_u16 = $just_u16;
        $this->maybe_u16 = $maybe_u16;
        $this->default_u16 = $default_u16;
        $this->just_i32 = $just_i32;
        $this->maybe_i32 = $maybe_i32;
        $this->default_i32 = $default_i32;
        $this->just_u32 = $just_u32;
        $this->maybe_u32 = $maybe_u32;
        $this->default_u32 = $default_u32;
        $this->just_i64 = $just_i64;
        $this->maybe_i64 = $maybe_i64;
        $this->default_i64 = $default_i64;
        $this->just_u64 = $just_u64;
        $this->maybe_u64 = $maybe_u64;
        $this->default_u64 = $default_u64;
        $this->just_f32 = $just_f32;
        $this->maybe_f32 = $maybe_f32;
        $this->default_f32 = $default_f32;
        $this->just_f64 = $just_f64;
        $this->maybe_f64 = $maybe_f64;
        $this->default_f64 = $default_f64;
        $this->just_bool = $just_bool;
        $this->maybe_bool = $maybe_bool;
        $this->default_bool = $default_bool;
        $this->just_enum = $just_enum;
        $this->maybe_enum = $maybe_enum;
        $this->default_enum = $default_enum;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int offset
     */
    public function pack(FlatBufferBuilder $builder)
    {
        ScalarStuff::startScalarStuff($builder);
        ScalarStuff::addJustI8($builder, $this->just_i8);
        ScalarStuff::addMaybeI8($builder, $this->maybe_i8);
        ScalarStuff::addDefaultI8($builder, $this->default_i8);
        ScalarStuff::addJustU8($builder, $this->just_u8);
        ScalarStuff::addMaybeU8($builder, $this->maybe_u8);
        ScalarStuff::addDefaultU8($builder, $this->default_u8);
        ScalarStuff::addJustI16($builder, $this->just_i16);
        ScalarStuff::addMaybeI16($builder, $this->maybe_i16);
        ScalarStuff::addDefaultI16($builder, $this->default_i16);
        ScalarStuff::addJustU16($builder, $this->just_u16);
        ScalarStuff::addMaybeU16($builder, $this->maybe_u16);
        ScalarStuff::addDefaultU16($builder, $this->default_u16);
        ScalarStuff::addJustI32($builder, $this->just_i32);
        ScalarStuff::addMaybeI32($builder, $this->maybe_i32);
        ScalarStuff::addDefaultI32($builder, $this->default_i32);
        ScalarStuff::addJustU32($builder, $this->just_u32);
        ScalarStuff::addMaybeU32($builder, $this->maybe_u32);
        ScalarStuff::addDefaultU32($builder, $this->default_u32);
        ScalarStuff::addJustI64($builder, $this->just_i64);
        ScalarStuff::addMaybeI64($builder, $this->maybe_i64);
        ScalarStuff::addDefaultI64($builder, $this->default_i64);
        ScalarStuff::addJustU64($builder, $this->just_u64);
        ScalarStuff::addMaybeU64($builder, $this->maybe_u64);
        ScalarStuff::addDefaultU64($builder, $this->default_u64);
        ScalarStuff::addJustF32($builder, $this->just_f32);
        ScalarStuff::addMaybeF32($builder, $this->maybe_f32);
        ScalarStuff::addDefaultF32($builder, $this->default_f32);
        ScalarStuff::addJustF64($builder, $this->just_f64);
        ScalarStuff::addMaybeF64($builder, $this->maybe_f64);
        ScalarStuff::addDefaultF64($builder, $this->default_f64);
        ScalarStuff::addJustBool($builder, $this->just_bool);
        ScalarStuff::addMaybeBool($builder, $this->maybe_bool);
        ScalarStuff::addDefaultBool($builder, $this->default_bool);
        ScalarStuff::addJustEnum($builder, $this->just_enum);
        ScalarStuff::addMaybeEnum($builder, $this->maybe_enum);
        ScalarStuff::addDefaultEnum($builder, $this->default_enum);
        $scalarStuff = ScalarStuff::endScalarStuff($builder);
        return $scalarStuff;
    }
}

class ScalarStuff extends Table implements IUnpackableObject
{
    /**
     * @param ByteBuffer $bb
     * @return ScalarStuff
     */
    public static function getRootAsScalarStuff(ByteBuffer $bb)
    {
        $obj = new ScalarStuff();
        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    /**
     * @param ByteBuffer $bb
     * @return ScalarStuff
     */
    public static function getSizePrefixedRootAsScalarStuff(ByteBuffer $bb)
    {
        $obj = new ScalarStuff();
        $bb->setPosition($bb->getPosition() + Constants::SIZEOF_INT);
        return $obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb);
    }

    public static function ScalarStuffIdentifier()
    {
        return "NULL";
    }

    public static function ScalarStuffBufferHasIdentifier(ByteBuffer $buf)
    {
        return self::__has_identifier($buf, self::ScalarStuffIdentifier());
    }

    public static function ScalarStuffExtension()
    {
        return "mon";
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return ScalarStuff
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    /**
     * @return sbyte
     */
    public function getJustI8()
    {
        $o = $this->__offset(4);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?sbyte
     */
    public function getMaybeI8()
    {
        $o = $this->__offset(6);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getDefaultI8()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : 42;
    }

    /**
     * @return byte
     */
    public function getJustU8()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?byte
     */
    public function getMaybeU8()
    {
        $o = $this->__offset(12);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : null;
    }

    /**
     * @return byte
     */
    public function getDefaultU8()
    {
        $o = $this->__offset(14);
        return $o != 0 ? $this->bb->getByte($o + $this->bb_pos) : 42;
    }

    /**
     * @return short
     */
    public function getJustI16()
    {
        $o = $this->__offset(16);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?short
     */
    public function getMaybeI16()
    {
        $o = $this->__offset(18);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : null;
    }

    /**
     * @return short
     */
    public function getDefaultI16()
    {
        $o = $this->__offset(20);
        return $o != 0 ? $this->bb->getShort($o + $this->bb_pos) : 42;
    }

    /**
     * @return ushort
     */
    public function getJustU16()
    {
        $o = $this->__offset(22);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?ushort
     */
    public function getMaybeU16()
    {
        $o = $this->__offset(24);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : null;
    }

    /**
     * @return ushort
     */
    public function getDefaultU16()
    {
        $o = $this->__offset(26);
        return $o != 0 ? $this->bb->getUshort($o + $this->bb_pos) : 42;
    }

    /**
     * @return int
     */
    public function getJustI32()
    {
        $o = $this->__offset(28);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?int
     */
    public function getMaybeI32()
    {
        $o = $this->__offset(30);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : null;
    }

    /**
     * @return int
     */
    public function getDefaultI32()
    {
        $o = $this->__offset(32);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 42;
    }

    /**
     * @return uint
     */
    public function getJustU32()
    {
        $o = $this->__offset(34);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?uint
     */
    public function getMaybeU32()
    {
        $o = $this->__offset(36);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : null;
    }

    /**
     * @return uint
     */
    public function getDefaultU32()
    {
        $o = $this->__offset(38);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 42;
    }

    /**
     * @return long
     */
    public function getJustI64()
    {
        $o = $this->__offset(40);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?long
     */
    public function getMaybeI64()
    {
        $o = $this->__offset(42);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : null;
    }

    /**
     * @return long
     */
    public function getDefaultI64()
    {
        $o = $this->__offset(44);
        return $o != 0 ? $this->bb->getLong($o + $this->bb_pos) : 42;
    }

    /**
     * @return ulong
     */
    public function getJustU64()
    {
        $o = $this->__offset(46);
        return $o != 0 ? $this->bb->getUlong($o + $this->bb_pos) : 0;
    }

    /**
     * @return ?ulong
     */
    public function getMaybeU64()
    {
        $o = $this->__offset(48);
        return $o != 0 ? $this->bb->getUlong($o + $this->bb_pos) : null;
    }

    /**
     * @return ulong
     */
    public function getDefaultU64()
    {
        $o = $this->__offset(50);
        return $o != 0 ? $this->bb->getUlong($o + $this->bb_pos) : 42;
    }

    /**
     * @return float
     */
    public function getJustF32()
    {
        $o = $this->__offset(52);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return ?float
     */
    public function getMaybeF32()
    {
        $o = $this->__offset(54);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : null;
    }

    /**
     * @return float
     */
    public function getDefaultF32()
    {
        $o = $this->__offset(56);
        return $o != 0 ? $this->bb->getFloat($o + $this->bb_pos) : 42.0;
    }

    /**
     * @return double
     */
    public function getJustF64()
    {
        $o = $this->__offset(58);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 0.0;
    }

    /**
     * @return ?double
     */
    public function getMaybeF64()
    {
        $o = $this->__offset(60);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : null;
    }

    /**
     * @return double
     */
    public function getDefaultF64()
    {
        $o = $this->__offset(62);
        return $o != 0 ? $this->bb->getDouble($o + $this->bb_pos) : 42.0;
    }

    /**
     * @return bool
     */
    public function getJustBool()
    {
        $o = $this->__offset(64);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : false;
    }

    /**
     * @return ?bool
     */
    public function getMaybeBool()
    {
        $o = $this->__offset(66);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : null;
    }

    /**
     * @return bool
     */
    public function getDefaultBool()
    {
        $o = $this->__offset(68);
        return $o != 0 ? $this->bb->getBool($o + $this->bb_pos) : true;
    }

    /**
     * @return sbyte
     */
    public function getJustEnum()
    {
        $o = $this->__offset(70);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \optional_scalars\OptionalByte::None;
    }

    /**
     * @return ?sbyte
     */
    public function getMaybeEnum()
    {
        $o = $this->__offset(72);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : null;
    }

    /**
     * @return sbyte
     */
    public function getDefaultEnum()
    {
        $o = $this->__offset(74);
        return $o != 0 ? $this->bb->getSbyte($o + $this->bb_pos) : \optional_scalars\OptionalByte::One;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startScalarStuff(FlatBufferBuilder $builder)
    {
        $builder->startObject(36);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return ScalarStuff
     */
    public static function createScalarStuff(FlatBufferBuilder $builder, $just_i8, $maybe_i8, $default_i8, $just_u8, $maybe_u8, $default_u8, $just_i16, $maybe_i16, $default_i16, $just_u16, $maybe_u16, $default_u16, $just_i32, $maybe_i32, $default_i32, $just_u32, $maybe_u32, $default_u32, $just_i64, $maybe_i64, $default_i64, $just_u64, $maybe_u64, $default_u64, $just_f32, $maybe_f32, $default_f32, $just_f64, $maybe_f64, $default_f64, $just_bool, $maybe_bool, $default_bool, $just_enum, $maybe_enum, $default_enum)
    {
        $builder->startObject(36);
        self::addJustI8($builder, $just_i8);
        self::addMaybeI8($builder, $maybe_i8);
        self::addDefaultI8($builder, $default_i8);
        self::addJustU8($builder, $just_u8);
        self::addMaybeU8($builder, $maybe_u8);
        self::addDefaultU8($builder, $default_u8);
        self::addJustI16($builder, $just_i16);
        self::addMaybeI16($builder, $maybe_i16);
        self::addDefaultI16($builder, $default_i16);
        self::addJustU16($builder, $just_u16);
        self::addMaybeU16($builder, $maybe_u16);
        self::addDefaultU16($builder, $default_u16);
        self::addJustI32($builder, $just_i32);
        self::addMaybeI32($builder, $maybe_i32);
        self::addDefaultI32($builder, $default_i32);
        self::addJustU32($builder, $just_u32);
        self::addMaybeU32($builder, $maybe_u32);
        self::addDefaultU32($builder, $default_u32);
        self::addJustI64($builder, $just_i64);
        self::addMaybeI64($builder, $maybe_i64);
        self::addDefaultI64($builder, $default_i64);
        self::addJustU64($builder, $just_u64);
        self::addMaybeU64($builder, $maybe_u64);
        self::addDefaultU64($builder, $default_u64);
        self::addJustF32($builder, $just_f32);
        self::addMaybeF32($builder, $maybe_f32);
        self::addDefaultF32($builder, $default_f32);
        self::addJustF64($builder, $just_f64);
        self::addMaybeF64($builder, $maybe_f64);
        self::addDefaultF64($builder, $default_f64);
        self::addJustBool($builder, $just_bool);
        self::addMaybeBool($builder, $maybe_bool);
        self::addDefaultBool($builder, $default_bool);
        self::addJustEnum($builder, $just_enum);
        self::addMaybeEnum($builder, $maybe_enum);
        self::addDefaultEnum($builder, $default_enum);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addJustI8(FlatBufferBuilder $builder, $justI8)
    {
        $builder->addSbyteX(0, $justI8, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMaybeI8(FlatBufferBuilder $builder, $maybeI8)
    {
        $builder->addSbyteX(1, $maybeI8, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDefaultI8(FlatBufferBuilder $builder, $defaultI8)
    {
        $builder->addSbyteX(2, $defaultI8, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addJustU8(FlatBufferBuilder $builder, $justU8)
    {
        $builder->addByteX(3, $justU8, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addMaybeU8(FlatBufferBuilder $builder, $maybeU8)
    {
        $builder->addByteX(4, $maybeU8, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param byte
     * @return void
     */
    public static function addDefaultU8(FlatBufferBuilder $builder, $defaultU8)
    {
        $builder->addByteX(5, $defaultU8, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addJustI16(FlatBufferBuilder $builder, $justI16)
    {
        $builder->addShortX(6, $justI16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addMaybeI16(FlatBufferBuilder $builder, $maybeI16)
    {
        $builder->addShortX(7, $maybeI16, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param short
     * @return void
     */
    public static function addDefaultI16(FlatBufferBuilder $builder, $defaultI16)
    {
        $builder->addShortX(8, $defaultI16, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addJustU16(FlatBufferBuilder $builder, $justU16)
    {
        $builder->addUshortX(9, $justU16, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addMaybeU16(FlatBufferBuilder $builder, $maybeU16)
    {
        $builder->addUshortX(10, $maybeU16, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ushort
     * @return void
     */
    public static function addDefaultU16(FlatBufferBuilder $builder, $defaultU16)
    {
        $builder->addUshortX(11, $defaultU16, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addJustI32(FlatBufferBuilder $builder, $justI32)
    {
        $builder->addIntX(12, $justI32, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addMaybeI32(FlatBufferBuilder $builder, $maybeI32)
    {
        $builder->addIntX(13, $maybeI32, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addDefaultI32(FlatBufferBuilder $builder, $defaultI32)
    {
        $builder->addIntX(14, $defaultI32, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addJustU32(FlatBufferBuilder $builder, $justU32)
    {
        $builder->addUintX(15, $justU32, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addMaybeU32(FlatBufferBuilder $builder, $maybeU32)
    {
        $builder->addUintX(16, $maybeU32, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addDefaultU32(FlatBufferBuilder $builder, $defaultU32)
    {
        $builder->addUintX(17, $defaultU32, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addJustI64(FlatBufferBuilder $builder, $justI64)
    {
        $builder->addLongX(18, $justI64, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addMaybeI64(FlatBufferBuilder $builder, $maybeI64)
    {
        $builder->addLongX(19, $maybeI64, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param long
     * @return void
     */
    public static function addDefaultI64(FlatBufferBuilder $builder, $defaultI64)
    {
        $builder->addLongX(20, $defaultI64, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ulong
     * @return void
     */
    public static function addJustU64(FlatBufferBuilder $builder, $justU64)
    {
        $builder->addUlongX(21, $justU64, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ulong
     * @return void
     */
    public static function addMaybeU64(FlatBufferBuilder $builder, $maybeU64)
    {
        $builder->addUlongX(22, $maybeU64, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param ulong
     * @return void
     */
    public static function addDefaultU64(FlatBufferBuilder $builder, $defaultU64)
    {
        $builder->addUlongX(23, $defaultU64, 42);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addJustF32(FlatBufferBuilder $builder, $justF32)
    {
        $builder->addFloatX(24, $justF32, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addMaybeF32(FlatBufferBuilder $builder, $maybeF32)
    {
        $builder->addFloatX(25, $maybeF32, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param float
     * @return void
     */
    public static function addDefaultF32(FlatBufferBuilder $builder, $defaultF32)
    {
        $builder->addFloatX(26, $defaultF32, 42.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addJustF64(FlatBufferBuilder $builder, $justF64)
    {
        $builder->addDoubleX(27, $justF64, 0.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addMaybeF64(FlatBufferBuilder $builder, $maybeF64)
    {
        $builder->addDoubleX(28, $maybeF64, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param double
     * @return void
     */
    public static function addDefaultF64(FlatBufferBuilder $builder, $defaultF64)
    {
        $builder->addDoubleX(29, $defaultF64, 42.0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addJustBool(FlatBufferBuilder $builder, $justBool)
    {
        $builder->addBoolX(30, $justBool, false);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addMaybeBool(FlatBufferBuilder $builder, $maybeBool)
    {
        $builder->addBoolX(31, $maybeBool, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param bool
     * @return void
     */
    public static function addDefaultBool(FlatBufferBuilder $builder, $defaultBool)
    {
        $builder->addBoolX(32, $defaultBool, true);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addJustEnum(FlatBufferBuilder $builder, $justEnum)
    {
        $builder->addSbyteX(33, $justEnum, \optional_scalars\OptionalByte::None);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addMaybeEnum(FlatBufferBuilder $builder, $maybeEnum)
    {
        $builder->addSbyteX(34, $maybeEnum, null);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param sbyte
     * @return void
     */
    public static function addDefaultEnum(FlatBufferBuilder $builder, $defaultEnum)
    {
        $builder->addSbyteX(35, $defaultEnum, \optional_scalars\OptionalByte::One);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endScalarStuff(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }

    public static function finishScalarStuffBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "NULL");
    }

    public static function finishSizePrefixedScalarStuffBuffer(FlatBufferBuilder $builder, $offset)
    {
        $builder->finish($offset, "NULL", true);
    }

    /**
     * @param ScalarStuffT $o
     */
    public function unPackTo(&$o)
    {
        $o->just_i8 = $this->getJustI8();
        $o->maybe_i8 = $this->getMaybeI8();
        $o->default_i8 = $this->getDefaultI8();
        $o->just_u8 = $this->getJustU8();
        $o->maybe_u8 = $this->getMaybeU8();
        $o->default_u8 = $this->getDefaultU8();
        $o->just_i16 = $this->getJustI16();
        $o->maybe_i16 = $this->getMaybeI16();
        $o->default_i16 = $this->getDefaultI16();
        $o->just_u16 = $this->getJustU16();
        $o->maybe_u16 = $this->getMaybeU16();
        $o->default_u16 = $this->getDefaultU16();
        $o->just_i32 = $this->getJustI32();
        $o->maybe_i32 = $this->getMaybeI32();
        $o->default_i32 = $this->getDefaultI32();
        $o->just_u32 = $this->getJustU32();
        $o->maybe_u32 = $this->getMaybeU32();
        $o->default_u32 = $this->getDefaultU32();
        $o->just_i64 = $this->getJustI64();
        $o->maybe_i64 = $this->getMaybeI64();
        $o->default_i64 = $this->getDefaultI64();
        $o->just_u64 = $this->getJustU64();
        $o->maybe_u64 = $this->getMaybeU64();
        $o->default_u64 = $this->getDefaultU64();
        $o->just_f32 = $this->getJustF32();
        $o->maybe_f32 = $this->getMaybeF32();
        $o->default_f32 = $this->getDefaultF32();
        $o->just_f64 = $this->getJustF64();
        $o->maybe_f64 = $this->getMaybeF64();
        $o->default_f64 = $this->getDefaultF64();
        $o->just_bool = $this->getJustBool();
        $o->maybe_bool = $this->getMaybeBool();
        $o->default_bool = $this->getDefaultBool();
        $o->just_enum = $this->getJustEnum();
        $o->maybe_enum = $this->getMaybeEnum();
        $o->default_enum = $this->getDefaultEnum();
    }

    /**
     * @return ScalarStuffT
     */
    public function unPack()
    {
        $o = new ScalarStuffT();
        $this->unPackTo($o);
        return $o;
    }
}
